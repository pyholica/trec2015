USArrests
dat
library(infotheo)
library(entropy)
data(USArrests)
dat<-discretize(USArrests, nbins = 5)
I <- mutinformation(dat, method = "emp")
I12 <- mutinformation(dat[,1:2], method = "emp")
I2 <- mutinformation(dat[,1:2],dat[,3])
M <- multiinformation(dat[,1:3])
entData <- disc
library(infotheo)
library(entropy)
data(USArrests)
dat<-discretize(USArrests, nbins = 5)
I <- mutinformation(dat, method = "emp")
I12 <- mutinformation(dat[,1:2], method = "emp")
I2 <- mutinformation(dat[,1:2],dat[,3])
M <- multiinformation(dat[,1:3])
entData <- disc
library(infotheo)
library(entropy)
data(USArrests)
dat<-discretize(USArrests, nbins = 5)
I <- mutinformation(dat, method = "emp")
I12 <- mutinformation(dat[,1:2], method = "emp")
I2 <- mutinformation(dat[,1:2],dat[,3])
M <- multiinformation(dat[,1:3])
library(infotheo)
library(entropy)
data(USArrests)
dat<-discretize(USArrests, nbins = 5)
I <- mutinformation(dat, method = "emp")
I12 <- mutinformation(dat[,1:2], method = "emp")
I2 <- mutinformation(dat[,1:2],dat[,3])
M <- multiinformation(dat[,1:3])
dat<-discretize(USArrests, nbins = 5)
dat<-discretize(USArrests, nbins = 5)
dat<-discretize(USArrests)
dat<-discretize(USArrests, numBins =  = 5)
dat<-discretize(USArrests, numBins = 5)
dat<-discretize(USArrests, nbins = 5)
dat<-discretize(USArrests, 5)
nbins<- sqrt(NROW(USArrests))
nbinx
nbin\a
nbins
dat<-discretize(USArrests, "equalwidth",nbins = 5)
dat<-discretize(USArrests, "equalwidth",nbins)
nbins<- round(sqrt(NROW(USArrests)))
dat<-discretize(USArrests, "equalwidth",nbins)
dat<-discretize(USArrests, "equalwidth",nbins = 5)
dat<-discretize(USArrests, nbins = 5)
library(infotheo)
#library(entropy)
data(USArrests)
nbins<- sqrt(NROW(USArrests))
dat<-discretize(USArrests, nbins = 5)
I <- mutinformation(dat, method = "emp")
I12 <- mutinformation(dat[,1:2], method = "emp")
I2 <- mutinformation(dat[,1:2],dat[,3])
M <- multiinformation(dat[,1:3])
dat<-discretize(USArrests, nbins = 5)
library(COSINE)
library(entropy)
library(ggplot2)
library(reshape2)
library(infotheo)
data(simulated_data)
data1 = simulated_data[1]
data2 = simulated_data[2]
data3 = simulated_data[3]
data4 = simulated_data[4]
data5 = simulated_data[5]
data6 = simulated_data[6]
data_control = simulated_data[7]
# list to matrix
mat_data1 <- matrix(unlist(data1), ncol=500)
mat_data2 <- matrix(unlist(data2), ncol=500)
mat_data3 <- matrix(unlist(data3), ncol=500)
mat_data4 <- matrix(unlist(data4), ncol=500)
mat_data5 <- matrix(unlist(data5), ncol=500)
mat_data6 <- matrix(unlist(data6), ncol=500)
mat_control <- matrix(unlist(data_control), ncol=500)
case_data01 <- rbind(mat_data1,
mat_control)
case_data02 <- rbind(mat_data2,
mat_control)
case_data03 <- rbind(mat_data3,
mat_control)
case_data04 <- rbind(mat_data4,
mat_control)
case_data05 <- rbind(mat_data5,
mat_control)
case_data06 <- rbind(mat_data6,
mat_control)
scale_data01 <- apply(case_data01, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data02 <- apply(case_data02, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data03 <- apply(case_data03, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data04 <- apply(case_data04, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data05 <- apply(case_data05, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data06 <- apply(case_data06, 2, FUN=function(X)(X-min(X))/diff(range(X)))
# labeled column case(0) and control(1)
case_label <- matrix(0, 20, 1)
control_label <- matrix(1, 20, 1)
labeled_data <- rbind(case_label, control_label)
# discrete
dataXY01_dis <- discretize(scale_data01, nbins = 5)
dataXY02_dis <- discretize(scale_data02, nbins = 5)
dataXY03_dis <- discretize(scale_data03, nbins = 5)
dataXY04_dis <- discretize(scale_data04, nbins = 5)
dataXY05_dis <- discretize(scale_data05, nbins = 5)
dataXY06_dis <- discretize(scale_data06, nbins = 5)
# case + label
dataXY01 <- cbind(dataXY01_dis, labeled_data)
dataXY02 <- cbind(dataXY02_dis, labeled_data)
dataXY03 <- cbind(dataXY03_dis, labeled_data)
dataXY04 <- cbind(dataXY04_dis, labeled_data)
dataXY05 <- cbind(dataXY05_dis, labeled_data)
dataXY06 <- cbind(dataXY06_dis, labeled_data)
# MI_function
MI_val <- function(case_data, i, j){
miData <- cbind(case_data[,i],case_data[,j])
result <- mutinformation(miData, case_data[,501])
return(result)
}
library(COSINE)
library(entropy)
library(ggplot2)
library(reshape2)
library(infotheo)
data(simulated_data)
data1 = simulated_data[1]
data2 = simulated_data[2]
data3 = simulated_data[3]
data4 = simulated_data[4]
data5 = simulated_data[5]
data6 = simulated_data[6]
data_control = simulated_data[7]
# list to matrix
mat_data1 <- matrix(unlist(data1), ncol=500)
mat_data2 <- matrix(unlist(data2), ncol=500)
mat_data3 <- matrix(unlist(data3), ncol=500)
mat_data4 <- matrix(unlist(data4), ncol=500)
mat_data5 <- matrix(unlist(data5), ncol=500)
mat_data6 <- matrix(unlist(data6), ncol=500)
mat_control <- matrix(unlist(data_control), ncol=500)
case_data01 <- rbind(mat_data1,
mat_control)
case_data02 <- rbind(mat_data2,
mat_control)
case_data03 <- rbind(mat_data3,
mat_control)
case_data04 <- rbind(mat_data4,
mat_control)
case_data05 <- rbind(mat_data5,
mat_control)
case_data06 <- rbind(mat_data6,
mat_control)
scale_data01 <- apply(case_data01, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data02 <- apply(case_data02, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data03 <- apply(case_data03, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data04 <- apply(case_data04, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data05 <- apply(case_data05, 2, FUN=function(X)(X-min(X))/diff(range(X)))
scale_data06 <- apply(case_data06, 2, FUN=function(X)(X-min(X))/diff(range(X)))
# labeled column case(0) and control(1)
case_label <- matrix(0, 20, 1)
control_label <- matrix(1, 20, 1)
labeled_data <- rbind(case_label, control_label)
# discrete
dataXY01_dis <- discretize(scale_data01, nbins = 5)
dataXY02_dis <- discretize(scale_data02, nbins = 5)
dataXY03_dis <- discretize(scale_data03, nbins = 5)
dataXY04_dis <- discretize(scale_data04, nbins = 5)
dataXY05_dis <- discretize(scale_data05, nbins = 5)
dataXY06_dis <- discretize(scale_data06, nbins = 5)
# case + label
dataXY01 <- cbind(dataXY01_dis, labeled_data)
dataXY02 <- cbind(dataXY02_dis, labeled_data)
dataXY03 <- cbind(dataXY03_dis, labeled_data)
dataXY04 <- cbind(dataXY04_dis, labeled_data)
dataXY05 <- cbind(dataXY05_dis, labeled_data)
dataXY06 <- cbind(dataXY06_dis, labeled_data)
# MI_function
MI_val <- function(case_data, i, j){
miData <- cbind(case_data[,i],case_data[,j])
result <- mutinformation(miData, case_data[,501])
return(result)
}
MI_matrix <- function(case_data){
# MI matrix 500 X 500
mat <- matrix(0, 500, 500)
for (i in 1:500){
for (j in 1:500){
mat[i,j] <- MI_val(case_data, i, j)
}
}
return(mat)
}
# MI matrix case_data01
MI_mat01 <- MI_matrix(dataXY01)
MI_mat02 <- MI_matrix(dataXY02)
MI_mat03 <- MI_matrix(dataXY03)
MI_mat04 <- MI_matrix(dataXY04)
MI_mat05 <- MI_matrix(dataXY05)
MI_mat06 <- MI_matrix(dataXY06)
#MI_melt <- melt(MI_mat01)
#MI_melt <- melt(MI_mat02)
#MI_melt <- melt(MI_mat03)
#MI_melt <- melt(MI_mat04)
#MI_melt <- melt(MI_mat05)
MI_melt <- melt(MI_mat06)
op <- par(mfrow = c(2,2))
MI_50_50 <- MI_melt[MI_melt$Var1 <= 50 & MI_melt$Var2 <= 50,]
hist(MI_50_50$value, main = "x1(1~50), x2(1~50)", xlab = "Mutual Information", xlim = c(0, 0.7))
MI_x1_51_500 <-MI_melt[MI_melt$Var1 > 50 & MI_melt$Var2 <= 50,]
hist(MI_x1_51_500$value, main = "x1(51~500), x2(1~50)", xlab = "Mutual Information", xlim = c(0, 0.7))
MI_x2_51_500 <- MI_melt[MI_melt$Var1 <= 50 & MI_melt$Var2 > 50,]
hist(MI_x2_51_500$value, main = "x1(1~50), x2(51~500)", xlab = "Mutual Information", xlim = c(0, 0.7))
MI_x12_51_500 <- MI_melt[MI_melt$Var1 > 50 & MI_melt$Var2 > 50,]
hist(MI_x12_51_500$value, main = "x1(51~500), x2(51~500)", xlab = "Mutual Information", xlim = c(0, 0.7))
entropy(dat[,3])
dat<-discretize(USArrests, nbins = 5)
entropy.Dirichlet
freqs.Dirichlet
H <- function(p_h, p_t) {
ret <- 0
if( p_h > 0.0 ) ret <- ret - p_h * log2(p_h)
if( p_t > 0.0 ) ret <- ret - p_t * log2(p_t)
return(ret)
}
head <- seq(0,1,0.01)
tail <- 1 - head
entropy <- mapply( H, head, tail)
entropy
vec <-c(2,1,4,1,5,4,4,4,4,2)
entropy(vec)
vecP <- vec/sum(vec)
vecP
sum(vecP)
vecLog2 <- log2(vec)
test <-c(2,2,2,2,,2,2,2,2,2,2)
test <-c(2,2,2,2,2,2,2,2,2,2)
vec*test
-sum(vecP*vecLog2)
sum(vecP*vecLog2)
vecLog2 <- log2(vec)
vecLog2
vecLog2 <- log2(vecP)
sum(vecP*vecLog2)
-sum(vecP*vecLog2)
entropy(vec)
entropy.Dirichlet(vec)
entropy.Dirichlet(vec, a=0)
entropy.Dirichlet(vec, a=1/sum(vec))
entropy.Dirichlet(vec, a=1/length(vec)
entropy.Dirichlet(vec, a=1/length(vec)
entropy.Dirichlet(vec, a=1/length(vec))
entropy.empirical(vec)
entropy.empirical(vec,unit = "log2")
library(entropy)
library(infotheo)
library(infotheo)
entropy.empirical(dat[,3],unit = "log2")
dat<-discretize(USArrests, nbins = 5)
install.packages("randomforest")
install.packages("randomForest")
library(randomForest)
source('~/.active-rstudio-document')
iris.rf <- randomForest(iris[,-5], iris[,5], prox=TRUE)
iris[,-5]
head(iris)
head(iris[,-5])
head(iris[,-3])
head(iris[,-1])
head(iris[,-2])
head(iris[,1])
head(iris[,2])
head(iris[,12])
head(iris[,-2])
head(iris[,1:2])
head(iris[,3:4])
head(iris[,3:5])
head(iris[,-5])
head(iris[,-5:1])
head(iris[,-1:-3])
head(iris)
library(stringr)
setwd("C:\\Users\\ajou\\Documents\\TREC\\code\\eval")
#setwd("/Users/woojin/Dropbox/woojin/code/py/keywordSearch")
getwd()
#answers = read.csv("testDataAnswer.txt", sep = "\t")
answers = read.csv("2014answer.csv", sep = ",")
head(answers)
for (i in 1:30 ) {
assign(paste("answer", i, sep=''), answers[answers$topicNum==i,]['Pmcid'])
}
make_val <- function(path, name){
for (i in 1:30 ) {
col = c(path,i,".csv")
file = paste(col, collapse = '')
print(file)
data = read.csv(file)
#print(data)
assign(paste(name, i, sep=''), data['pmcid'], envir = .GlobalEnv)
print(paste(name, i, sep=''))
}
return(do_eval(name))
}
do_eval <- function(name){
list <- vector()
for (i in 1:30){
data = paste(c(name, i), collapse = '')
ans = paste(c("answer", i), collapse = '')
print(ans[[1]])
precision =length(intersect(get(data)[[1]], get(ans)[[1]]))
print(paste(i, length(intersect(get(data)[[1]], get(ans)[[1]])), sep = ', '))
list <- c(list, precision)
}
return(list)
}
DFR_topic_expansion <- make_val(".topic_DFR/DFR_topic_queryexpansion_2014/DFR summary", "DFR summary")
getwd()
setwd("C:/Users/ajou/Dropbox/woojin/code/eval")
getwd()
DFR_topic_expansion <- make_val(".topic_DFR/DFR_topic_queryexpansion_2014/DFR summary", "DFR summary")
DFR_topic_expansion <- make_val("./topic_DFR/DFR_topic_queryexpansion_2014/DFR summary", "DFR summary")
DFR_topic_expansion <- make_val("./topic_DFR/DFR_topic_queryexpansion_2014/DFR summary", "DFR summary")
answers = read.csv("2014answer.csv", sep = ",")
library(stringr)
#setwd("C:\\Users\\ajou\\Documents\\TREC\\code\\eval")
#setwd("/Users/woojin/Dropbox/woojin/code/py/keywordSearch")
setwd("C:/Users/ajou/Dropbox/woojin/code/eval")
getwd()
#answers = read.csv("testDataAnswer.txt", sep = "\t")
answers = read.csv("2014answer.csv", sep = ",")
head(answers)
for (i in 1:30 ) {
assign(paste("answer", i, sep=''), answers[answers$topicNum==i,]['Pmcid'])
}
make_val <- function(path, name){
for (i in 1:30 ) {
col = c(path,i,".csv")
file = paste(col, collapse = '')
print(file)
data = read.csv(file)
#print(data)
assign(paste(name, i, sep=''), data['pmcid'], envir = .GlobalEnv)
print(paste(name, i, sep=''))
}
return(do_eval(name))
}
do_eval <- function(name){
list <- vector()
for (i in 1:30){
data = paste(c(name, i), collapse = '')
ans = paste(c("answer", i), collapse = '')
print(ans[[1]])
precision =length(intersect(get(data)[[1]], get(ans)[[1]]))
print(paste(i, length(intersect(get(data)[[1]], get(ans)[[1]])), sep = ', '))
list <- c(list, precision)
}
return(list)
}
DFR_topic_expansion <- make_val("./topic_DFR/DFR_topic_queryexpansion_2014/DFR summary", "DFR summary")
evaluation_topic_expans <- data.frame(DFR_topic_expansion)
write.csv(evaluation_topic_expans, file="evaluation_topic_expans.csv")
DFR_topic_expansion_edge <- make_val("./topic_DFR/DFR_topic_queryexpansion_EDGE_2014/DFR summary", "DFR summary")
evaluation_topic_expans_edge <- data.frame(DFR_topic_expansion_edge0
write.csv(evaluation_topic_expans_edge, file="evaluation_topic_expans_edge.csv")
DFR_topic_expansion_edge <- make_val("./topic_DFR/DFR_topic_queryexpansion_EDGE_2014/DFR summary", "DFR summary")
evaluation_topic_expans_edge <- data.frame(DFR_topic_expansion_edge)
write.csv(evaluation_topic_expans_edge, file="evaluation_topic_expans_edge.csv")
getwd()
load("C:/Users/ajou/Dropbox/woojin/cosine/20150722/20150723/cosine_MI_origin.RData")
library(COSINE)
library(entropy)
library(ggplot2)
library(reshape2)
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
load("C:/Users/ajou/Dropbox/woojin/cosine/20150722/env_100.RData")
library(COSINE)
library(entropy)
library(reshape2)
# seperated charts
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
load("C:/Users/ajou/Dropbox/woojin/cosine/20150722/cosine_bin10.RData")
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
load("C:/Users/ajou/Dropbox/woojin/cosine/20150720/cosine_env_new2.RData")
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
load("C:/Users/ajou/Dropbox/woojin/cosine/20150720/cosine_env_new.RData")
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
load("C:/Users/ajou/Dropbox/woojin/cosine/20150717/cosine_MI_env.RData")
barchartR("Set 1 COSINE, MI Recall", perform01, perform_MI01)
barchartP("Set 1 COSINE, MI Precision", perform01, perform_MI01)
barchartF("Set 1 COSINE, MI F-measure", perform01, perform_MI01)
barchartR("Set 2 COSINE, MI Recall", perform02, perform_MI02)
barchartP("Set 2 COSINE, MI Precision", perform02, perform_MI02)
barchartF("Set 2 COSINE, MI F-measure", perform02, perform_MI02)
barchartR("Set 3 COSINE, MI Recall", perform03, perform_MI03)
barchartP("Set 3 COSINE, MI Precision", perform03, perform_MI03)
barchartF("Set 3 COSINE, MI F-measure", perform03, perform_MI03)
barchartR("Set 4 COSINE, MI Recall", perform04, perform_MI04)
barchartP("Set 4 COSINE, MI Precision", perform04, perform_MI04)
barchartF("Set 4 COSINE, MI F-measure", perform04, perform_MI04)
barchartR("Set 5 COSINE, MI Recall", perform05, perform_MI05)
barchartP("Set 5 COSINE, MI Precision", perform05, perform_MI05)
barchartF("Set 5 COSINE, MI F-measure", perform05, perform_MI05)
barchartR("Set 6 COSINE, MI Recall", perform06, perform_MI06)
barchartP("Set 6 COSINE, MI Precision", perform06, perform_MI06)
barchartF("Set 6 COSINE, MI F-measure", perform06, perform_MI06)
